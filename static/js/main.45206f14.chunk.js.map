{"version":3,"sources":["img/background.jpg","utils.ts","API.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["module","exports","shuffleArr","arr","sort","Math","random","Difficulty","EASY","MEDIUM","HARD","fetchQuizQuestions","amount","difficulty","category","a","endpoint","console","log","fetch","json","data","results","map","question","answers","incorrect_answers","correct_answer","Wrapper","styled","div","ButtonWrapper","userHasAnswered","correct","userClicked","QuestionCard","callback","user_answer","q_num","q_total","className","dangerouslySetInnerHTML","__html","answer","key","undefined","disabled","value","onClick","GlobalStyle","createGlobalStyle","background","Categories","Animals","App","useState","loading","setLoading","questions","setQuestions","question_number","setQuestionNumber","user_answers","setUserAnswers","score","setScore","game_ended","setGameEnded","category_state","setCategory","difficulty_state","setDifficulty","new_questions","err","alert","length","defaultValue","onChange","e","currentTarget","Object","keys","diff","prev","answer_obj","TOTAL_QUESTIONS","next_question","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.45206f14.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.e6b740b7.jpg\";","export function shuffleArr(arr: any[]) {\r\n  return [...arr].sort(() => Math.random() - 0.5);\r\n}\r\n","import { shuffleArr } from \"./utils\";\r\n\r\n// Not an enum because mapping with enums is a massive pain!\r\nexport const Difficulty: { [key: string]: string } = {\r\n  EASY: \"easy\",\r\n  MEDIUM: \"medium\",\r\n  HARD: \"hard\",\r\n};\r\n\r\nexport type QuestionData = {\r\n  category: string;\r\n  correct_answer: string;\r\n  difficulty: string;\r\n  incorrect_answers: string[];\r\n  question: string;\r\n  type: string;\r\n};\r\n\r\nexport type QuestionDataComplete = QuestionData & { answers: string[] };\r\n\r\nexport async function fetchQuizQuestions(\r\n  amount: number,\r\n  difficulty: string,\r\n  category: number\r\n): Promise<QuestionDataComplete[]> {\r\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple&category=${category}`;\r\n  console.log(endpoint);\r\n  const data = await (await fetch(endpoint)).json();\r\n\r\n  console.log(data);\r\n\r\n  return data.results.map((question: QuestionData) => ({\r\n    ...question,\r\n    answers: shuffleArr([\r\n      ...question.incorrect_answers,\r\n      question.correct_answer,\r\n    ]),\r\n  }));\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nconst col_grey = \"#494949\";\r\nconst col_green = \"#0CC76D\";\r\nconst col_red = \"#ff6961\";\r\nconst col_ltgrey = \"#f2f2f2\";\r\n\r\nexport const Wrapper = styled.div`\r\n  width: 50vw;\r\n  max-width: 1100px;\r\n  background: ${col_ltgrey};\r\n  border: 4px solid ${col_grey};\r\n  padding: 40px;\r\n  margin: 20px;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  text-align: center;\r\n  p {\r\n    font-size: 1rem;\r\n    text-align: left;\r\n    margin-top: 0;\r\n  }\r\n`;\r\n\r\ntype ButtonWrapperProps = {\r\n  correct: boolean;\r\n  userClicked: boolean;\r\n  userHasAnswered: boolean;\r\n};\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  button {\r\n    cursor: ${({ userHasAnswered }) =>\r\n      userHasAnswered ? \"default\" : \"pointer\"};\r\n    user-select: none;\r\n    font-size: 0.8rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    color: #494949 !important;\r\n    background: #ffffff;\r\n    padding: 10px 20px 10px 20px;\r\n    border: 4px solid !important;\r\n    border-color: ${({ correct, userClicked, userHasAnswered }) =>\r\n      !userHasAnswered\r\n        ? col_grey\r\n        : correct\r\n        ? col_green\r\n        : !correct && userClicked\r\n        ? col_red\r\n        : col_grey} !important;\r\n\r\n    background: ${({ correct, userClicked }) =>\r\n      correct ? col_green : !correct && userClicked ? col_red : \"#ffffff\"};\r\n    border: 3px solid #ffffff;\r\n    color: #fff;\r\n    transition: all 0.4s ease 0s;\r\n  }\r\n  button:hover {\r\n    ${({ userHasAnswered }) =>\r\n      !userHasAnswered\r\n        ? `color: #ffffff !important;\r\n          background: ${col_grey};\r\n          transition: all 0.4s ease 0s;`\r\n        : \"\"};\r\n  }\r\n  button:focus {\r\n    outline: none;\r\n  }\r\n`;\r\n","import React from \"react\";\r\n\r\n// Styles\r\nimport { Wrapper, ButtonWrapper } from \"./QuestionCard.styles\";\r\n\r\n// Types\r\nimport { AnswerObject } from \"../App\";\r\ntype QuestionCardProps = {\r\n  question: string;\r\n  answers: string[];\r\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n  user_answer: AnswerObject | undefined;\r\n  q_num: number;\r\n  q_total: number;\r\n};\r\n\r\nconst QuestionCard: React.FC<QuestionCardProps> = ({\r\n  question,\r\n  answers,\r\n  callback,\r\n  user_answer,\r\n  q_num,\r\n  q_total,\r\n}) => (\r\n  <Wrapper>\r\n    <p className=\"number\">\r\n      Question: {q_num} / {q_total}\r\n    </p>\r\n\r\n    <p dangerouslySetInnerHTML={{ __html: question }} />\r\n    <div>\r\n      {answers.map((answer) => (\r\n        <ButtonWrapper\r\n          key={answer}\r\n          correct={user_answer?.correct_answer === answer}\r\n          userClicked={user_answer?.answer === answer}\r\n          userHasAnswered={user_answer !== undefined}\r\n        >\r\n          <button disabled={!!user_answer} value={answer} onClick={callback}>\r\n            <span dangerouslySetInnerHTML={{ __html: answer }}></span>\r\n          </button>\r\n        </ButtonWrapper>\r\n      ))}\r\n    </div>\r\n  </Wrapper>\r\n);\r\n\r\nexport default QuestionCard;\r\n","import styled, { createGlobalStyle } from \"styled-components\";\r\nimport background from \"./img/background.jpg\";\r\n\r\nconst col_grey = \"#494949\";\r\nconst col_blue = \"#1e90ff\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        height: 100%;\r\n    }\r\n\r\n    body {\r\n        background-image: url(${background});\r\n        background-size: cover;\r\n        margin: 0;\r\n        padding: 0 20px;\r\n        display: flex;\r\n        justify-content:center;\r\n    }\r\n\r\n    * {\r\n        box-sizing: border-box;\r\n        font-family: 'Ubuntu', sans-serif;\r\n    }\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  > p {\r\n    color: #fff;\r\n  }\r\n\r\n  .score {\r\n    color: ${col_grey};\r\n    font-size: 2rem;\r\n    margin: 0;\r\n  }\r\n\r\n  h1 {\r\n    font-family: Fascinate Inline, sans-serif;\r\n    color: ${col_grey};\r\n    font-size: 70px;\r\n    font-weight: 400;\r\n    margin: 20px;\r\n    transition: all 0.4s ease 0s;\r\n  }\r\n\r\n  h1:hover {\r\n    color: ${col_blue};\r\n    transition: all 0.4s ease 0s;\r\n  }\r\n\r\n  .start,\r\n  .next {\r\n    cursor: pointer;\r\n    color: ${col_grey} !important;\r\n    text-transform: uppercase;\r\n    text-decoration: none;\r\n    background: #ffffff;\r\n    padding: 10px 40px 10px 40px;\r\n    border: 4px solid ${col_grey} !important;\r\n    display: inline-block;\r\n    transition: all 0.4s ease 0s;\r\n    margin: 20px 0;\r\n  }\r\n  .start:hover,\r\n  .next:hover {\r\n    color: #ffffff !important;\r\n    background: ${col_grey};\r\n    transition: all 0.4s ease 0s;\r\n  }\r\n  .start:focus,\r\n  .next:focus {\r\n    outline: none;\r\n  }\r\n  .start:active,\r\n  .next:active {\r\n    color: #ffffff !important;\r\n    background: ${col_blue};\r\n    border-color: ${col_blue} !important;\r\n  }\r\n  .start {\r\n    max-width: 200px;\r\n  }\r\n\r\n  .dropdown {\r\n    cursor: pointer;\r\n    color: ${col_grey} !important;\r\n    text-transform: uppercase;\r\n    text-decoration: none;\r\n    background: #ffffff;\r\n    padding: 10px;\r\n    margin: 20px;\r\n    border: 4px solid ${col_grey} !important;\r\n    display: inline-block;\r\n    transition: all 0.4s ease 0s;\r\n  }\r\n  .dropdown:hover:not(:focus) {\r\n    color: #ffffff !important;\r\n    background: ${col_grey};\r\n    transition: all 0.4s ease 0s;\r\n  }\r\n  .dropdown:focus {\r\n    outline: none;\r\n  }\r\n\r\n  .loader {\r\n    border: 8px solid ${col_grey};\r\n    border-radius: 50%;\r\n    border-top: 8px solid ${col_blue};\r\n    width: 80px;\r\n    height: 80px;\r\n    margin: 15%;\r\n    -webkit-animation: spin 2s linear infinite; /* Safari */\r\n    animation: spin 2s linear infinite;\r\n  }\r\n\r\n  /* Safari */\r\n  @-webkit-keyframes spin {\r\n    0% {\r\n      -webkit-transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n\r\n  @keyframes spin {\r\n    0% {\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n`;\r\n","import React, { useState } from \"react\";\nimport { fetchQuizQuestions } from \"./API\";\n\n// Components\nimport QuestionCard from \"./components/QuestionCard\";\n\n// Types\nimport { QuestionDataComplete, Difficulty } from \"./API\";\n\n// Styles\nimport { GlobalStyle, Wrapper } from \"./App.styles\";\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correct_answer: string;\n};\n\nconst Categories: { [key: string]: number } = {\n  \"General Knowledge\": 9,\n  \"Computer Science\": 18,\n  \"Cartoons & Animation\": 32,\n  Animals: 27,\n};\n\n// Global Variables\nconst TOTAL_QUESTIONS = 10;\n\n// Main App\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionDataComplete[]>([]);\n  const [question_number, setQuestionNumber] = useState(0);\n  const [user_answers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [game_ended, setGameEnded] = useState(true);\n  const [category_state, setCategory] = useState(\n    Categories[\"General Knowledge\"]\n  );\n  const [difficulty_state, setDifficulty] = useState(Difficulty.EASY as string);\n\n  async function startQuiz() {\n    setLoading(true);\n    setGameEnded(false);\n\n    const new_questions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      difficulty_state,\n      category_state\n    );\n\n    try {\n      setQuestions(new_questions);\n    } catch (err) {\n      alert(`An exception occurred trying to set up the quiz for you:\\n${err}`);\n    }\n    setScore(0);\n    setUserAnswers([]);\n    setQuestionNumber(0);\n    setLoading(false);\n  }\n\n  // Check the validity of the user's answer and commit the answer to the list of recorded answers\n  function checkAnswer(e: React.MouseEvent<HTMLButtonElement>) {\n    if (!game_ended) {\n      const answer = e.currentTarget.value;\n      const correct = questions[question_number].correct_answer === answer;\n\n      // Commit answer\n      if (correct) setScore((prev) => prev + 1);\n      const answer_obj = {\n        question: questions[question_number].question,\n        answer,\n        correct,\n        correct_answer: questions[question_number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answer_obj]);\n    }\n  }\n\n  // Progress onto the next question in the quiz\n  function nextQuestion() {\n    const next_question = question_number + 1;\n\n    if (next_question === TOTAL_QUESTIONS) {\n      setGameEnded(true);\n    } else {\n      setQuestionNumber(next_question);\n    }\n  }\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>How Quizzical‽</h1>\n        {/* Render dropdowns and start button at quiz start */}\n        {(game_ended || user_answers.length === TOTAL_QUESTIONS) && (\n          <>\n            <div>\n              <select\n                className=\"dropdown\"\n                defaultValue={category_state}\n                onChange={(e) => setCategory(+e.currentTarget.value)}\n              >\n                {Object.keys(Categories).map((category) => (\n                  <option key={category} value={Categories[category]}>\n                    {category}\n                  </option>\n                ))}\n              </select>\n              <select\n                className=\"dropdown\"\n                defaultValue={difficulty_state}\n                onChange={(e) => setDifficulty(e.currentTarget.value)}\n              >\n                {Object.keys(Difficulty).map((diff) => (\n                  <option key={diff} value={Difficulty[diff]}>\n                    {diff}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <button className=\"start\" onClick={startQuiz}>\n              Start\n            </button>\n          </>\n        )}\n        {!game_ended && !loading && <p className=\"score\">Score: {score}</p>}{\" \"}\n        {/* Render score if appropriate */}\n        {loading && <div className=\"loader\"></div>}{\" \"}\n        {/* Render loader when loading */}\n        {/* Render questoin cards during quiz */}\n        {!loading && !game_ended && (\n          <QuestionCard\n            q_num={question_number + 1}\n            q_total={TOTAL_QUESTIONS}\n            question={questions[question_number].question}\n            answers={questions[question_number].answers}\n            user_answer={\n              user_answers ? user_answers[question_number] : undefined\n            }\n            callback={checkAnswer}\n          />\n        )}\n        {/* Render next button after answering */}\n        {!loading &&\n          !game_ended &&\n          user_answers.length === question_number + 1 &&\n          question_number !== TOTAL_QUESTIONS - 1 && (\n            <button className=\"next\" onClick={nextQuestion}>\n              Next Question\n            </button>\n          )}\n      </Wrapper>\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}